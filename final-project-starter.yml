Description:
  Long Tony / Cloudformation Project
Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  # VPCs and so on.
  MyBucket:
    Description: Bucket to store files
    Type: String 
Resources:
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - Ref: UdacityS3ReadOnlyEC2
  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 's3:GetObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${MyBucket}/*'
                  - !Sub 'arn:aws:s3:::${MyBucket}'
  WebAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our instances
      VpcId: 
        Fn::ImportValue: 
          'Fn::Sub': '${EnvironmentName}-VPCID'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535 
        CidrIp: 0.0.0.0/0
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all access to our load balancers on port 80
      VpcId: 
        Fn::ImportValue: 
          'Fn::Sub': '${EnvironmentName}-VPCID'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0      
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install apache2 -y
          sudo systemctl start apache2.service  
          cd /var/www/html
          echo "it works! Udagram, Udacity" > index.html        
      ImageId: ami-053b0d53c279acc90
      IamInstanceProfile: 
        Ref:  ProfileWithRolesForOurApp
      SecurityGroups: 
      - Ref: WebAccessSecurityGroup
      InstanceType: t2.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'                  
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - Fn::ImportValue: 
            'Fn::Sub': "${EnvironmentName}-PRI1-SN"
        - Fn::ImportValue: 
            'Fn::Sub': "${EnvironmentName}-PRI2-SN"
      LaunchConfigurationName: 
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '6'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: 
          'Fn::Sub': "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: 
          'Fn::Sub': "${EnvironmentName}-PUB2-SN"
      SecurityGroups: 
      - !GetAtt LBSecGroup.GroupId
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: 
          Ref: WebAppTargetGroup
      LoadBalancerArn: 
        Ref: WebAppLB
      Port: 80
      Protocol: HTTP
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: 
          Ref: 'WebAppTargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: 
        Ref: 'Listener'
      Priority: 1         
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"     
Outputs:
  OutputAppLB:
    Description: A reference to LoadBalancers
    Value: !Ref WebAppLB
  OutputWebAppLaunchConfig:
    Description: A reference to WebAppLauchConfig
    Value: !Ref WebAppLaunchConfig
  OutputLBSecGroup:
    Description: A reference to Load balancer Security Group
    Value: !Ref LBSecGroup
  OutputWebAccessSecurityGroup:
    Description: A reference to Instances Security Group
    Value: !Ref WebAccessSecurityGroup
